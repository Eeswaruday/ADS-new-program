#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

// Define a pair structure to store the vertex and the cost to reach it
typedef pair<int, int> pii;

void dijkstra(int source, vector<vector<pii>>& adj, int V) {
    // Create a priority queue to store the nodes and distances
    priority_queue<pii, vector<pii>, greater<pii>> pq;
    
    // Distance vector to store the shortest distance from source to each node
    vector<int> dist(V, INT_MAX);

    // Start with the source node: distance to itself is 0
    dist[source] = 0;
    pq.push({0, source});  // Push (distance, node) into the priority queue

    while (!pq.empty()) {
        int currentDistance = pq.top().first;
        int currentNode = pq.top().second;
        pq.pop();

        // Explore all adjacent nodes
        for (auto& neighbor : adj[currentNode]) {
            int nextNode = neighbor.first;
            int weight = neighbor.second;

            // If a shorter path to the next node is found
            if (dist[currentNode] + weight < dist[nextNode]) {
                dist[nextNode] = dist[currentNode] + weight;
                pq.push({dist[nextNode], nextNode});
            }
        }
    }

    // Print the shortest distances from the source to all nodes
    cout << "Vertex   Distance from Source " << source << endl;
    for (int i = 0; i < V; ++i) {
        cout << i << "\t\t" << dist[i] << endl;
    }
}

int main() {
    int V, E;
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    // Adjacency list to store graph: (vertex -> [(neighbor, weight), ...])
    vector<vector<pii>> adj(V);

    cout << "Enter edges in the format (u v w), where u and v are vertices and w is the weight of the edge:" << endl;
    for (int i = 0; i < E; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        adj[u].push_back({v, w});
        adj[v].push_back({u, w});  // For undirected graph, comment this out for directed graph
    }

    int source;
    cout << "Enter the source vertex: ";
    cin >> source;

    // Run Dijkstra's algorithm
    dijkstra(source, adj, V);

    return 0;
}
