#include <iostream>
#include <vector>

using namespace std;

const int T = 3; // Minimum degree (defines the range for number of keys)

class BTreeNode {
    vector<int> keys;
    vector<BTreeNode*> children;
    bool leaf;
    int t;

public:
    BTreeNode(int _t, bool _leaf) : t(_t), leaf(_leaf) {
        keys.reserve(2 * t - 1);
        children.reserve(2 * t);
    }

    void insertNonFull(int k);
    void splitChild(int i, BTreeNode* y);
    void traverse();

    friend class BTree;
};

class BTree {
    BTreeNode* root;
    int t;

public:
    BTree(int _t) : t(_t) {
        root = new BTreeNode(t, true);
    }

    void traverse() {
        if (root != nullptr) root->traverse();
    }

    void insert(int k) {
        if (root->keys.size() == 2 * t - 1) {
            BTreeNode* s = new BTreeNode(t, false);
            s->children.push_back(root);
            s->splitChild(0, root);
            root = s;
        }
        root->insertNonFull(k);
    }
};

void BTreeNode::insertNonFull(int k) {
    int i = keys.size() - 1;
    if (leaf) {
        keys.push_back(0);
        while (i >= 0 && keys[i] > k) {
            keys[i + 1] = keys[i];
            i--;
        }
        keys[i + 1] = k;
    } else {
        while (i >= 0 && keys[i] > k) {
            i--;
        }
        i++;
        if (children[i]->keys.size() == 2 * t - 1) {
            splitChild(i, children[i]);
            if (keys[i] < k) i++;
        }
        children[i]->insertNonFull(k);
    }
}

void BTreeNode::splitChild(int i, BTreeNode* y) {
    BTreeNode* z = new BTreeNode(y->t, y->leaf);
    for (int j = 0; j < t - 1; j++) {
        z->keys.push_back(y->keys[j + t]);
    }
    if (!y->leaf) {
        for (int j = 0; j < t; j++) {
            z->children.push_back(y->children[j + t]);
        }
    }
    y->keys.resize(t - 1);
    y->children.resize(t);
    children.insert(children.begin() + i + 1, z);
    keys.insert(keys.begin() + i, y->keys[t - 1]);
}

void BTreeNode::traverse() {
    int i;
    for (i = 0; i < keys.size(); i++) {
        if (!leaf) children[i]->traverse();
        cout << keys[i] << " ";
    }
    if (!leaf) children[i]->traverse();
}

int main() {
    BTree t(T);

    t.insert(10);
    t.insert(20);
    t.insert(5);
    t.insert(6);
    t.insert(15);
    t.insert(30);
    t.insert(25);
    t.insert(35);

    cout << "Traversal of the constructed B-tree is: ";
    t.traverse();
    cout << endl;

    return 0;
}